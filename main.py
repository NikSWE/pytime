from argparse import ArgumentParser, ArgumentTypeError
from calendar import timegm
from time import gmtime, asctime
from datetime import datetime
from requests import get
from re import match
import sys
import json


def is_date_valid(date):
    try:
        return match(r"[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}", date).group(0)
    except:
        raise ArgumentTypeError("Invalid format for date provided")


def is_time_valid(time):
    try:
        return match(r"([0-1][0-9]|[2][0-3]):[0-5][0-9]:[0-5][0-9]",
                     time).group(0)
    except:
        raise ArgumentTypeError("Invalid format for time provided")


is_required = False
if len(sys.argv) > 1:
    is_required = True

parser = ArgumentParser()

parser.add_argument("-d",
                    "--date",
                    help="Date to convert from one timezone to another",
                    type=is_date_valid,
                    required=is_required)
parser.add_argument("-t",
                    "--time",
                    help="Time to convert from one timezone to another",
                    type=is_time_valid,
                    required=is_required)
parser.add_argument("--from",
                    help="Timezone to convert from",
                    required=is_required)
parser.add_argument("--to",
                    help="Timezone to convert to",
                    required=is_required)
parser.add_argument("--api-key",
                    help="API key generated by Time Zone Database",
                    required=is_required)

args = parser.parse_args()


def is_args_empty(args):
    for arg in args.__dict__:
        if args.__dict__[arg] is None:
            return True
    return False


if is_args_empty(args):
    print(asctime(datetime.now().timetuple()))
else:
    data = json.loads(open("./data.json").read())

    endpoint = "http://api.timezonedb.com/v2.1/convert-time-zone?"
    api_key = args.api_key

    date_list = str(args.date).split("-")

    time_list = str(args.time).split(":")

    from_timezone = args.__dict__["from"]

    to_timezone = args.to

    from_timezone_abbr = ""
    to_timezone_abbr = ""

    for timezone in data:
        if from_timezone == timezone["time_zone"]:
            from_timezone_abbr = timezone["abbreviation"]
        if to_timezone == timezone["time_zone"]:
            to_timezone_abbr = timezone["abbreviation"]

    unix_time = timegm(
        datetime(int(date_list[0]), int(date_list[1]), int(date_list[2]),
                 int(time_list[0]), int(time_list[1]),
                 int(time_list[2])).timetuple())

    response = get(
        endpoint, {
            "key": api_key,
            "format": "json",
            "from": from_timezone,
            "to": to_timezone,
            "time": str(unix_time)
        }).json()

    print(asctime(gmtime(unix_time)) + " " + "{}".format(from_timezone_abbr))
    print(
        asctime(gmtime(response["toTimestamp"])) + " " +
        "{}".format(to_timezone_abbr))
